{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11453588,"sourceType":"datasetVersion","datasetId":7176464},{"sourceId":11650389,"sourceType":"datasetVersion","datasetId":7311190}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torchvision\nimport torchvision.transforms as transforms\nimport torchvision.models as models\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.optim as optim\n\nimport pandas as pd\nimport os\nfrom PIL import Image\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\nimport random\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-02T20:43:28.441136Z","iopub.execute_input":"2025-05-02T20:43:28.441574Z","iopub.status.idle":"2025-05-02T20:43:38.896584Z","shell.execute_reply.started":"2025-05-02T20:43:28.441542Z","shell.execute_reply":"2025-05-02T20:43:38.895697Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"class ImageDataset(Dataset):\n    def __init__(self, images_folder_path, labels_file_path, transform=None):\n        labels = pd.read_csv(labels_file_path) \n        labels['count'] = labels['count'].astype(float)\n        self.labels = labels \n        \n        self.images_path = images_folder_path\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.labels)\n\n    def __getitem__(self, index):   \n        image_file, label = self.labels.iloc[index]\n        img = Image.open(os.path.join(self.images_path, image_file))\n         \n        if self.transform:\n            img = self.transform(img)\n            \n        return img, label\n        \n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-02T20:43:38.897516Z","iopub.execute_input":"2025-05-02T20:43:38.897958Z","iopub.status.idle":"2025-05-02T20:43:38.904309Z","shell.execute_reply.started":"2025-05-02T20:43:38.897928Z","shell.execute_reply":"2025-05-02T20:43:38.903561Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"data_transforms = transforms.Compose([\n    transforms.Resize((256, 256)),\n    transforms.RandomHorizontalFlip(p=0.5),  \n    # transforms.RandomRotation(degrees=20),      \n    transforms.ToTensor(),\n])\n\ndataset = ImageDataset('/kaggle/input/image-regression-test-data/images/', '/kaggle/input/image-regression-test-data/annotations.csv', data_transforms)\n\nBATCH_SIZE = 32\ndata_loader = DataLoader(dataset, batch_size=BATCH_SIZE, shuffle=True) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-02T13:38:08.967086Z","iopub.execute_input":"2025-05-02T13:38:08.967264Z","iopub.status.idle":"2025-05-02T13:38:08.971198Z","shell.execute_reply.started":"2025-05-02T13:38:08.967250Z","shell.execute_reply":"2025-05-02T13:38:08.970489Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"def show_random_samples(dataset, num_samples=5): \n    indices = random.sample(range(len(dataset)), num_samples)\n    plt.figure(figsize=(num_samples * 2, 2))\n    \n    for i, idx in enumerate(indices):\n        image, label = dataset[idx]  # Assumes dataset returns (image, label)\n        \n        if isinstance(image, torch.Tensor):\n            image = image.permute(1, 2, 0)  # CxHxW -> HxWxC\n \n        plt.subplot(1, num_samples, i + 1)\n        plt.imshow(image.numpy())\n        plt.title(f\"Label: {label}\")\n        plt.axis(\"off\")\n    \n    plt.tight_layout()\n    plt.show()\n\nshow_random_samples(dataset, num_samples=5)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-02T13:38:08.668281Z","iopub.execute_input":"2025-05-02T13:38:08.668954Z","iopub.status.idle":"2025-05-02T13:38:08.966215Z","shell.execute_reply.started":"2025-05-02T13:38:08.668935Z","shell.execute_reply":"2025-05-02T13:38:08.965526Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x200 with 5 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":36},{"cell_type":"code","source":"\nclass CNNModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n        # self.main = nn.Sequential(\n        #     nn.Conv2d(in_channels=3, out_channels=6, kernel_size=3, stride=1, padding=0),\n        #     nn.ReLU(),\n        #     nn.MaxPool2d(2, stride=2),\n        #     nn.Conv2d(in_channels=6, out_channels=16, kernel_size=3, stride=1, padding=0), \n        #     nn.ReLU(),\n        #     nn.MaxPool2d(2, stride=2),   \n        # ) \n        \n        self.resnet = models.resnet50(pretrained=True).requires_grad_(False)\n        self.resnet.fc = nn.Linear(self.resnet.fc.in_features, 1024)\n\n        self.fc = nn.Sequential(\n            nn.Flatten(), \n            nn.Linear(in_features=1024, out_features=256),\n            nn.ReLU(),\n            nn.Linear(in_features=256, out_features=1)\n        )\n\n    def forward(self, x):\n        x = self.resnet(x)\n        x = self.fc(x)\n        return x\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-02T13:38:09.009161Z","iopub.execute_input":"2025-05-02T13:38:09.009760Z","iopub.status.idle":"2025-05-02T13:38:09.014370Z","shell.execute_reply.started":"2025-05-02T13:38:09.009743Z","shell.execute_reply":"2025-05-02T13:38:09.013709Z"}},"outputs":[],"execution_count":38},{"cell_type":"code","source":"device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\nmodel = CNNModel()\nmodel.to(device)\n\n\nlr = 1e-4\ncriterion = nn.MSELoss()\noptimizer = optim.Adam(params=model.parameters(), lr=lr) \n\nepochs = 50","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-02T13:38:09.166244Z","iopub.execute_input":"2025-05-02T13:38:09.166835Z","iopub.status.idle":"2025-05-02T13:38:09.695616Z","shell.execute_reply.started":"2025-05-02T13:38:09.166811Z","shell.execute_reply":"2025-05-02T13:38:09.694855Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\n","output_type":"stream"}],"execution_count":39},{"cell_type":"code","source":"# loop over the dataset multiple times\nfor epoch in tqdm(range(epochs), total=epochs):\n    running_loss = 0.0\n    for i, data in enumerate(data_loader, 0):\n        inputs, labels = data\n        labels = labels.float()\n        inputs, labels = inputs.to(device), labels.to(device) \n\n        # zero the parameter gradients\n        optimizer.zero_grad()\n\n        # forward + backward + optimize\n        outputs = model(inputs)\n        outputs = outputs.squeeze()\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        running_loss += loss.item()\n\n    print('Loss: {}'.format(running_loss))\n\nprint('Finished Training')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-02T13:38:13.465211Z","iopub.execute_input":"2025-05-02T13:38:13.465499Z","iopub.status.idle":"2025-05-02T13:42:46.959607Z","shell.execute_reply.started":"2025-05-02T13:38:13.465479Z","shell.execute_reply":"2025-05-02T13:42:46.958796Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b3a9607578c14f24a1d43c46717c884c"}},"metadata":{}},{"name":"stdout","text":"Loss: 3203.77547454834\nLoss: 2600.180923461914\nLoss: 1970.9184188842773\nLoss: 1385.9557914733887\nLoss: 949.3710651397705\nLoss: 713.6733226776123\nLoss: 626.5927124023438\nLoss: 600.9232997894287\nLoss: 589.0381774902344\nLoss: 567.8766250610352\nLoss: 552.6136026382446\nLoss: 525.6303558349609\nLoss: 509.1261558532715\nLoss: 494.5972194671631\nLoss: 470.43534660339355\nLoss: 461.7745609283447\nLoss: 427.2307596206665\nLoss: 407.5212297439575\nLoss: 393.68902015686035\nLoss: 364.3756351470947\nLoss: 339.0103950500488\nLoss: 314.0642786026001\nLoss: 295.6849126815796\nLoss: 276.960168838501\nLoss: 253.2561550140381\nLoss: 241.59494161605835\nLoss: 213.4286904335022\nLoss: 204.01312351226807\nLoss: 169.54284572601318\nLoss: 165.95956754684448\nLoss: 150.98446083068848\nLoss: 138.61640429496765\nLoss: 137.41409015655518\nLoss: 127.52801394462585\nLoss: 120.52039074897766\nLoss: 117.82495737075806\nLoss: 102.32269620895386\nLoss: 121.95983862876892\nLoss: 111.87772130966187\nLoss: 95.90431761741638\nLoss: 97.06951689720154\nLoss: 116.258127450943\nLoss: 116.83249115943909\nLoss: 102.27934122085571\nLoss: 100.93834328651428\nLoss: 100.60119557380676\nLoss: 108.67052221298218\nLoss: 92.25783967971802\nLoss: 99.68195629119873\nLoss: 91.75771903991699\nFinished Training\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}